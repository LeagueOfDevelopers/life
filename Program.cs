using System;

namespace GameOfLife
{
    class Program
    {
        static void Main(string[] args)
        {
            //Живые клетки - 1, мёртвые - 0
            int[,] Grid = new int[15, 22];
            int[,] Shuttle = { 
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                           { 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                           { 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           };
            int[,] Pulsar = { 
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                           };
            int turn = 1, mode = 0;
            Random rnd = new Random();
            for (int i = 0; i < 15; i++)
                for (int j = 0; j < 22; j++)
                    Grid[i, j] = rnd.Next(2);

            Console.WriteLine("Подборка расположения клеток:");
            Console.WriteLine("0 - Обычный режим (случайное расположение)\n1 - 'Шаттл'\n2 - 'Пульсар'");
            mode = int.Parse(Console.ReadLine());
            switch (mode)
            {
                case 1:
                    for (int i = 0; i < 15; i++)
                        for (int j = 0; j < 22; j++)
                            Grid[i, j] = Shuttle[i, j];
                    break;
                case 2:
                    for (int i = 0; i < 15; i++)
                        for (int j = 0; j < 22; j++)
                            Grid[i, j] = Pulsar[i, j];
                    break;
                default:
                    break;
            }
            drawGrid(Grid);

            while (true)
            {
                Console.WriteLine("{0:d} поколение", turn);
                Grid = updateGrid(Grid);
                drawGrid(Grid);
                int k = 0;
                for (int i = 0; i < 15; i++)
                    for (int j = 0; j < 22; j++)
                        if (Grid[i, j] == 1)
                            k++;
                if (k == 0)
                {
                    Console.WriteLine("Игра закончилась на {0:d} ходу", turn);
                    Console.ReadKey();
                    break;
                }
                turn++;
            }
        }

        static void drawGrid(int[,] Grid) // Создание поля
        {
            Console.Clear();
            for (int i = 0; i < 15; i++)
            {
                for (int j = 0; j < 22; j++)
                    Console.Write((Grid[i, j] == 1) ? "██" : "||");
                Console.WriteLine();
            }
        }

        static int[,] updateGrid(int[,] Grid) // Обновление поля
        {
            int[,] newgrid = new int[15, 22];
            for (int i = 0; i < 15; i++)
            {
                for (int j = 0; j < 22; j++)
                {
                    int neighbors = 0;
                    //Используем try/catch для удобства подсчёта на границах массива
                    try { neighbors += Grid[i, j + 1]; }
                    catch { }
                    try { neighbors += Grid[i, j - 1]; }
                    catch { }
                    try { neighbors += Grid[i + 1, j]; }
                    catch { }
                    try { neighbors += Grid[i - 1, j]; }
                    catch { }
                    try { neighbors += Grid[i + 1, j + 1]; }
                    catch { }
                    try { neighbors += Grid[i - 1, j - 1]; }
                    catch { }
                    try { neighbors += Grid[i + 1, j - 1]; }
                    catch { }
                    try { neighbors += Grid[i - 1, j + 1]; }
                    catch { }
                    if (neighbors > 3)
                        newgrid[i, j] = 0; // Умирает от перенаселения
                    if (neighbors < 2)
                        newgrid[i, j] = 0; // Умирает от одиночества
                    if (Grid[i, j] == 0 && neighbors == 3)
                        newgrid[i, j] = 1; // Родилась новая клетка
                    if (neighbors >= 2 && neighbors <= 3 && Grid[i, j] == 1)
                        newgrid[i, j] = 1; // Ничего не изменяется
                }
            }
            return newgrid;
        }
    }
}